name: NSHM

services:
  # Database Services
  postgres:
    image: postgres
    ports:
      - 5432:5432
    env_file:
      - services/account/.env
    volumes:
      - ./services/account/database:/docker-entrypoint-initdb.d
    restart: always

  mongo_item:
    image: mongo
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_PASS}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    env_file:
      - services/item/.env
    volumes:
      - ./services/item/database/dev:/docker-entrypoint-initdb.d
    restart: always

  mongo_wishlist:
    image: mongo
    ports:
      - 27018:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_PASS}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    env_file:
      - services/wishlist/.env
    volumes:
      - ./services/wishlist/database:/docker-entrypoint-initdb.d
    restart: always

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 15672:15672
    env_file:
      - envs/rabbitmq.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 30s
      retries: 5
    restart: always

  # Application Services
  web:
    build:
      context: services/web
      dockerfile: Dockerfile.dev
    ports:
      - 3000:3000
    env_file:
      - services/web/.env
    volumes:
      - ./services/web:/app
      - /app/node_modules
    restart: always

  account:
    build:
      context: services/account
      dockerfile: Dockerfile
    ports:
      - 8081:8081
    env_file:
      - services/account/.env
      - envs/rabbitmq.env
    depends_on:
      - postgres
      - rabbitmq
    restart: always

  wishlist:
    build:
      context: services/wishlist
      dockerfile: Dockerfile
    ports:
      - 8082:8082
    env_file:
      - services/wishlist/.env
      - envs/rabbitmq.env
    depends_on:
      - mongo_wishlist
      - rabbitmq
    restart: always

  item:
    build:
      context: services/item
      dockerfile: Dockerfile.dev
    ports:
      - 8083:8083
    env_file:
      - services/item/.env
      - envs/rabbitmq.env
    depends_on:
      - mongo_item
      - rabbitmq
    restart: always

  # Reverse Proxy
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    depends_on:
      - web
      - account
      - item
      - wishlist
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always

volumes:
  rabbitmq_data:
