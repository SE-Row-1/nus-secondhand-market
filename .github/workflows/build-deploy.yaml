name: Build and Deploy

on:
  push:
    branches:
      - setup-infra2
  workflow_dispatch:
    inputs:
      build:
        description: 'Input to trigger the destroy process'
        required: true
        default: 'false'
        type: boolean
   #  - main
   #paths:
   #  - 'frontend/**'
   #  - 'backend/**'

jobs:
  build:
    if: ${{ github.event.inputs.build == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker build -t z1yoon/nus-secondhand-market-frontend:latest ./frontend
          docker build -t z1yoon/nus-secondhand-market-backend:latest ./backend

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker images
        run: |
          docker push z1yoon/nus-secondhand-market-frontend:latest
          docker push z1yoon/nus-secondhand-market-backend:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: ap-southeast-1
  deploy:
    runs-on: ubuntu-latest
   #needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download EC2 Public IP Artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow_search: true
          path: terraform/

      - name: Read EC2 Public IP
        id: read_ip
        run: |
          PUBLIC_IP=$(cat terraform/ec2-public-ip/ec2_public_ip.txt)
          echo "Public IP: $PUBLIC_IP"
          echo "::set-output name=ec2_public_ip::$PUBLIC_IP"

      - name: SSH into EC2 and deploy
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.read_ip.outputs.ec2_public_ip }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yaml"
          target: "/home/ubuntu"

      - name: SSH into EC2 to run Docker Compose
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ steps.read_ip.outputs.ec2_public_ip }} << 'EOF'
          echo "postgres_url=${{ secrets.POSTGRES_URL }}" >> .env
          echo "postgres_username=${{ secrets.POSTGRES_USERNAME }}" >> .env
          echo "postgres_password=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          cat .env
          docker-compose up -d
          EOF
